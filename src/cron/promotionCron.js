import cron from 'node-cron';
import { database } from "../data/firebaseConfig.js";

// H√†m t·ª± ƒë·ªông c·∫≠p nh·∫≠t tr·∫°ng th√°i promotion (s·ªë l∆∞·ª£ng = 0 ho·∫∑c qu√° h·∫°n)
const autoUpdatePromotionStatus = async () => {
  try {
    console.log('üïê B·∫Øt ƒë·∫ßu ki·ªÉm tra v√† c·∫≠p nh·∫≠t promotion t·ª± ƒë·ªông...');
    
    const promotionsRef = database.ref("Promotions");
    const snapshot = await promotionsRef.once("value");

    if (!snapshot.exists()) {
      console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu promotion ƒë·ªÉ ki·ªÉm tra');
      return;
    }

    const promotions = snapshot.val();
    const now = new Date();
    let updatedCount = 0;
    const updatePromises = [];

    for (const key in promotions) {
      const promotion = promotions[key];
      let needsUpdate = false;
      const updateData = {};

      // Ki·ªÉm tra s·ªë l∆∞·ª£ng
      if (promotion.quantity === 0 && promotion.status !== "inactive") {
        updateData.status = "inactive";
        needsUpdate = true;
        console.log(`üì¶ Promotion ${promotion.id_promotion}: H·∫øt s·ªë l∆∞·ª£ng`);
      }

      // Ki·ªÉm tra ng√†y h·∫øt h·∫°n
      if (promotion.date_end) {
        const endDate = new Date(promotion.date_end);
        if (endDate < now && promotion.status !== "inactive") {
          updateData.status = "inactive";
          needsUpdate = true;
          console.log(`‚è∞ Promotion ${promotion.id_promotion}: ƒê√£ h·∫øt h·∫°n`);
        }
      }

      // C·∫≠p nh·∫≠t n·∫øu c·∫ßn
      if (needsUpdate) {
        updatePromises.push(
          promotionsRef.child(key).update(updateData)
        );
        updatedCount++;
      }
    }

    // Th·ª±c hi·ªán t·∫•t c·∫£ c√°c c·∫≠p nh·∫≠t
    if (updatePromises.length > 0) {
      await Promise.all(updatePromises);
      console.log(`‚úÖ ƒê√£ t·ª± ƒë·ªông c·∫≠p nh·∫≠t ${updatedCount} promotion`);
    } else {
      console.log('‚úÖ Kh√¥ng c√≥ promotion n√†o c·∫ßn c·∫≠p nh·∫≠t');
    }

    console.log(`üìä T·ªïng s·ªë promotion: ${Object.keys(promotions).length}`);

  } catch (error) {
    console.error('‚ùå L·ªói khi t·ª± ƒë·ªông c·∫≠p nh·∫≠t promotion:', error);
  }
};

// Kh·ªüi t·∫°o cron job - ch·∫°y m·ªói ng√†y l√∫c 00:00 (n·ª≠a ƒë√™m)
const initPromotionCron = () => {
  // Cron pattern: '0 0 * * *' = ch·∫°y l√∫c 00:00 m·ªói ng√†y
  cron.schedule('0 0 * * *', () => {
    console.log('üöÄ Cron job: T·ª± ƒë·ªông c·∫≠p nh·∫≠t promotion h√†ng ng√†y');
    autoUpdatePromotionStatus();
  }, {
    scheduled: true,
    timezone: "Asia/Ho_Chi_Minh" // M√∫i gi·ªù Vi·ªát Nam
  });

  console.log('‚è∞ Cron job promotion ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o - ch·∫°y m·ªói ng√†y l√∫c 00:00');
};

// H√†m ch·∫°y ngay l·∫≠p t·ª©c khi kh·ªüi ƒë·ªông server (t√πy ch·ªçn)
const runImmediateCheck = () => {
  console.log('üîç Ch·∫°y ki·ªÉm tra promotion ngay l·∫≠p t·ª©c...');
  autoUpdatePromotionStatus();
};

export { initPromotionCron, autoUpdatePromotionStatus, runImmediateCheck }; 